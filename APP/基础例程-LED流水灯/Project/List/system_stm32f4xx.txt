; generated by ARM C/C++ Compiler, 4.1 [Build 567]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\Obj\system_stm32f4xx.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\User -I..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F40XX --omf_browse=.\Obj\system_stm32f4xx.crf ..\User\system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;469      */
;;;470    static void SetSysClock(void)
000000  2000              MOVS     r0,#0
;;;471    {
;;;472    /******************************************************************************/
;;;473    /*            PLL (clocked by HSE) used as System clock source                */
;;;474    /******************************************************************************/
;;;475      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
;;;476      
;;;477      /* Enable HSE */
;;;478      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000002  4929              LDR      r1,|L1.168|
000004  f8d12800          LDR      r2,[r1,#0x800]
000008  f4423280          ORR      r2,r2,#0x10000
00000c  f8c12800          STR      r2,[r1,#0x800]
;;;479     
;;;480      /* Wait till HSE is ready and if Time out is reached exit */
;;;481      do
;;;482      {
;;;483        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;484        StartUpCounter++;
;;;485      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000010  f44f43a0          MOV      r3,#0x5000
                  |L1.20|
000014  f8d12800          LDR      r2,[r1,#0x800]        ;483
000018  f4023200          AND      r2,r2,#0x20000        ;483
00001c  1c40              ADDS     r0,r0,#1              ;484
00001e  b90a              CBNZ     r2,|L1.36|
000020  4298              CMP      r0,r3
000022  d1f7              BNE      |L1.20|
                  |L1.36|
;;;486    
;;;487      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000024  f8d10800          LDR      r0,[r1,#0x800]
000028  0380              LSLS     r0,r0,#14
00002a  d501              BPL      |L1.48|
;;;488      {
;;;489        HSEStatus = (uint32_t)0x01;
00002c  2001              MOVS     r0,#1
00002e  e000              B        |L1.50|
                  |L1.48|
;;;490      }
;;;491      else
;;;492      {
;;;493        HSEStatus = (uint32_t)0x00;
000030  2000              MOVS     r0,#0
                  |L1.50|
;;;494      }
;;;495    
;;;496      if (HSEStatus == (uint32_t)0x01)
000032  2801              CMP      r0,#1
000034  d136              BNE      |L1.164|
;;;497      {
;;;498        /* Select regulator voltage output Scale 1 mode */
;;;499        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
000036  f5016100          ADD      r1,r1,#0x800
00003a  6c08              LDR      r0,[r1,#0x40]
00003c  f0405080          ORR      r0,r0,#0x10000000
000040  6408              STR      r0,[r1,#0x40]
;;;500        PWR->CR |= PWR_CR_VOS;
000042  481a              LDR      r0,|L1.172|
000044  6802              LDR      r2,[r0,#0]
000046  f4424240          ORR      r2,r2,#0xc000
00004a  6002              STR      r2,[r0,#0]
;;;501    
;;;502        /* HCLK = SYSCLK / 1*/
;;;503        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
00004c  6888              LDR      r0,[r1,#8]
00004e  6088              STR      r0,[r1,#8]
;;;504    
;;;505    #if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
;;;506        /* PCLK2 = HCLK / 2*/
;;;507        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000050  6888              LDR      r0,[r1,#8]
000052  f4404000          ORR      r0,r0,#0x8000
000056  6088              STR      r0,[r1,#8]
;;;508        
;;;509        /* PCLK1 = HCLK / 4*/
;;;510        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
000058  6888              LDR      r0,[r1,#8]
00005a  f44050a0          ORR      r0,r0,#0x1400
00005e  6088              STR      r0,[r1,#8]
;;;511    #endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx */
;;;512    
;;;513    #if defined (STM32F401xx)
;;;514        /* PCLK2 = HCLK / 2*/
;;;515        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;516        
;;;517        /* PCLK1 = HCLK / 4*/
;;;518        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;519    #endif /* STM32F401xx */
;;;520       
;;;521        /* Configure the main PLL */
;;;522        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000060  4813              LDR      r0,|L1.176|
000062  6048              STR      r0,[r1,#4]
;;;523                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;524    
;;;525        /* Enable the main PLL */
;;;526        RCC->CR |= RCC_CR_PLLON;
000064  6808              LDR      r0,[r1,#0]
000066  f0407080          ORR      r0,r0,#0x1000000
00006a  6008              STR      r0,[r1,#0]
00006c  f5a16100          SUB      r1,r1,#0x800
                  |L1.112|
;;;527    
;;;528        /* Wait till the main PLL is ready */
;;;529        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000070  f8d10800          LDR      r0,[r1,#0x800]
000074  0180              LSLS     r0,r0,#6
000076  d5fb              BPL      |L1.112|
;;;530        {
;;;531        }
;;;532       
;;;533    #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
;;;534        /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
;;;535        PWR->CR |= PWR_CR_ODEN;
;;;536        while((PWR->CSR & PWR_CSR_ODRDY) == 0)
;;;537        {
;;;538        }
;;;539        PWR->CR |= PWR_CR_ODSWEN;
;;;540        while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
;;;541        {
;;;542        }      
;;;543        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;544        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
;;;545    #endif /* STM32F427_437x || STM32F429_439xx  */
;;;546    
;;;547    #if defined (STM32F40_41xxx)     
;;;548        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;549        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
000078  f2407005          MOV      r0,#0x705
00007c  f8c10c00          STR      r0,[r1,#0xc00]
;;;550    #endif /* STM32F40_41xxx  */
;;;551    
;;;552    #if defined (STM32F401xx)
;;;553        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;554        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;555    #endif /* STM32F401xx */
;;;556    
;;;557        /* Select the main PLL as system clock source */
;;;558        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000080  f8d10808          LDR      r0,[r1,#0x808]
000084  f0200003          BIC      r0,r0,#3
000088  f8c10808          STR      r0,[r1,#0x808]
;;;559        RCC->CFGR |= RCC_CFGR_SW_PLL;
00008c  f8d10808          LDR      r0,[r1,#0x808]
000090  f0400002          ORR      r0,r0,#2
000094  f8c10808          STR      r0,[r1,#0x808]
                  |L1.152|
;;;560    
;;;561        /* Wait till the main PLL is used as system clock source */
;;;562        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
000098  f8d10808          LDR      r0,[r1,#0x808]
00009c  f3c00081          UBFX     r0,r0,#2,#2
0000a0  2802              CMP      r0,#2
0000a2  d1f9              BNE      |L1.152|
                  |L1.164|
;;;563        {
;;;564        }
;;;565      }
;;;566      else
;;;567      { /* If HSE fails to start-up, the application will have wrong clock
;;;568             configuration. User can add here some code to deal with this error */
;;;569      }
;;;570    
;;;571    }
0000a4  4770              BX       lr
;;;572    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L1.168|
                          DCD      0x40023000
                  |L1.172|
                          DCD      0x40007000
                  |L1.176|
                          DCD      0x07405419

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;413      */
;;;414    void SystemCoreClockUpdate(void)
000000  b510              PUSH     {r4,lr}
;;;415    {
;;;416      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
;;;417      
;;;418      /* Get SYSCLK source -------------------------------------------------------*/
;;;419      tmp = RCC->CFGR & RCC_CFGR_SWS;
000002  4a20              LDR      r2,|L2.132|
000004  f8d20808          LDR      r0,[r2,#0x808]
000008  f000000c          AND      r0,r0,#0xc
;;;420    
;;;421      switch (tmp)
;;;422      {
;;;423        case 0x00:  /* HSI used as system clock source */
;;;424          SystemCoreClock = HSI_VALUE;
00000c  4b1e              LDR      r3,|L2.136|
00000e  491f              LDR      r1,|L2.140|
000010  b180              CBZ      r0,|L2.52|
;;;425          break;
;;;426        case 0x04:  /* HSE used as system clock source */
;;;427          SystemCoreClock = HSE_VALUE;
000012  4c1f              LDR      r4,|L2.144|
000014  2804              CMP      r0,#4                 ;421
000016  d00f              BEQ      |L2.56|
000018  2808              CMP      r0,#8                 ;421
00001a  d00f              BEQ      |L2.60|
;;;428          break;
;;;429        case 0x08:  /* PLL used as system clock source */
;;;430    
;;;431          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;432             SYSCLK = PLL_VCO / PLL_P
;;;433             */    
;;;434          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
;;;435          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
;;;436          
;;;437          if (pllsource != 0)
;;;438          {
;;;439            /* HSE used as PLL clock source */
;;;440            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;441          }
;;;442          else
;;;443          {
;;;444            /* HSI used as PLL clock source */
;;;445            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
;;;446          }
;;;447    
;;;448          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
;;;449          SystemCoreClock = pllvco/pllp;
;;;450          break;
;;;451        default:
;;;452          SystemCoreClock = HSI_VALUE;
00001c  600b              STR      r3,[r1,#0]  ; SystemCoreClock
                  |L2.30|
;;;453          break;
;;;454      }
;;;455      /* Compute HCLK frequency --------------------------------------------------*/
;;;456      /* Get HCLK prescaler */
;;;457      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
00001e  f8d20808          LDR      r0,[r2,#0x808]
000022  4a1a              LDR      r2,|L2.140|
000024  f3c01003          UBFX     r0,r0,#4,#4
000028  1d12              ADDS     r2,r2,#4
00002a  5c10              LDRB     r0,[r2,r0]
;;;458      /* HCLK frequency */
;;;459      SystemCoreClock >>= tmp;
00002c  680a              LDR      r2,[r1,#0]  ; SystemCoreClock
00002e  40c2              LSRS     r2,r2,r0
000030  600a              STR      r2,[r1,#0]  ; SystemCoreClock
;;;460    }
000032  bd10              POP      {r4,pc}
                  |L2.52|
000034  600b              STR      r3,[r1,#0]            ;424  ; SystemCoreClock
000036  e7f2              B        |L2.30|
                  |L2.56|
000038  600c              STR      r4,[r1,#0]            ;427  ; SystemCoreClock
00003a  e7f0              B        |L2.30|
                  |L2.60|
00003c  f8d20804          LDR      r0,[r2,#0x804]        ;434
000040  f3c05c80          UBFX     r12,r0,#22,#1         ;434
000044  f8d20804          LDR      r0,[r2,#0x804]        ;435
000048  f000003f          AND      r0,r0,#0x3f           ;435
00004c  f1bc0f00          CMP      r12,#0                ;437
000050  d007              BEQ      |L2.98|
000052  fbb4f0f0          UDIV     r0,r4,r0              ;440
000056  f8d23804          LDR      r3,[r2,#0x804]        ;440
00005a  f3c31388          UBFX     r3,r3,#6,#9           ;440
00005e  4358              MULS     r0,r3,r0              ;440
000060  e006              B        |L2.112|
                  |L2.98|
000062  fbb3f0f0          UDIV     r0,r3,r0              ;445
000066  f8d23804          LDR      r3,[r2,#0x804]        ;445
00006a  f3c31388          UBFX     r3,r3,#6,#9           ;445
00006e  4358              MULS     r0,r3,r0              ;445
                  |L2.112|
000070  f8d23804          LDR      r3,[r2,#0x804]        ;448
000074  f3c34301          UBFX     r3,r3,#16,#2          ;448
000078  1c5b              ADDS     r3,r3,#1              ;448
00007a  005b              LSLS     r3,r3,#1              ;448
00007c  fbb0f0f3          UDIV     r0,r0,r3              ;449
000080  6008              STR      r0,[r1,#0]            ;449  ; SystemCoreClock
000082  e7cc              B        |L2.30|
;;;461    
                          ENDP

                  |L2.132|
                          DCD      0x40023000
                  |L2.136|
                          DCD      0x00f42400
                  |L2.140|
                          DCD      ||.data||
                  |L2.144|
                          DCD      0x017d7840

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;336      */
;;;337    void SystemInit(void)
000000  b510              PUSH     {r4,lr}
;;;338    {
;;;339      /* FPU settings ------------------------------------------------------------*/
;;;340      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;341        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
;;;342      #endif
;;;343      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;344      /* Set HSION bit */
;;;345      RCC->CR |= (uint32_t)0x00000001;
000002  480e              LDR      r0,|L3.60|
000004  6801              LDR      r1,[r0,#0]
000006  f0410101          ORR      r1,r1,#1
00000a  6001              STR      r1,[r0,#0]
;;;346    
;;;347      /* Reset CFGR register */
;;;348      RCC->CFGR = 0x00000000;
00000c  f04f0100          MOV      r1,#0
000010  6081              STR      r1,[r0,#8]
;;;349    
;;;350      /* Reset HSEON, CSSON and PLLON bits */
;;;351      RCC->CR &= (uint32_t)0xFEF6FFFF;
000012  6802              LDR      r2,[r0,#0]
000014  4b0a              LDR      r3,|L3.64|
000016  ea020203          AND      r2,r2,r3
00001a  6002              STR      r2,[r0,#0]
;;;352    
;;;353      /* Reset PLLCFGR register */
;;;354      RCC->PLLCFGR = 0x24003010;
00001c  4a09              LDR      r2,|L3.68|
00001e  6042              STR      r2,[r0,#4]
;;;355    
;;;356      /* Reset HSEBYP bit */
;;;357      RCC->CR &= (uint32_t)0xFFFBFFFF;
000020  6802              LDR      r2,[r0,#0]
000022  f4222280          BIC      r2,r2,#0x40000
000026  6002              STR      r2,[r0,#0]
;;;358    
;;;359      /* Disable all interrupts */
;;;360      RCC->CIR = 0x00000000;
000028  60c1              STR      r1,[r0,#0xc]
;;;361    
;;;362    #if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
;;;363      SystemInit_ExtMemCtl(); 
;;;364    #endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
;;;365             
;;;366      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;367         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;368      SetSysClock();
00002a  f7fffffe          BL       SetSysClock
;;;369    
;;;370      /* Configure the Vector Table location add offset address ------------------*/
;;;371    #ifdef VECT_TAB_SRAM
;;;372      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;373    #else
;;;374      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00002e  f04f21e0          MOV      r1,#0xe000e000
000032  f04f6000          MOV      r0,#0x8000000
000036  f8c10d08          STR      r0,[r1,#0xd08]
;;;375    #endif
;;;376    }
00003a  bd10              POP      {r4,pc}
;;;377    
                          ENDP

                  |L3.60|
                          DCD      0x40023800
                  |L3.64|
                          DCD      0xfef6ffff
                  |L3.68|
                          DCD      0x24003010

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0a037a00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\User\\system_stm32f4xx.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 112 "C:\\Keil\\ARM\\RV31\\Inc\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 130
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
